/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface MessageTesterInterface extends ethers.utils.Interface {
  functions: {
    'attemptSendMessage(bytes32,bytes)': FunctionFragment;
    'attemptSendMessageWithAmount(bytes32,uint256,bytes)': FunctionFragment;
    'data1()': FunctionFragment;
    'data2()': FunctionFragment;
    'fuelMessagePortal()': FunctionFragment;
    'getTrustedSender()': FunctionFragment;
    'receiveMessage(uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'attemptSendMessage',
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'attemptSendMessageWithAmount',
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'data1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'data2', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'fuelMessagePortal',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getTrustedSender',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveMessage',
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'attemptSendMessage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'attemptSendMessageWithAmount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'data1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'data2', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'fuelMessagePortal',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTrustedSender',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveMessage',
    data: BytesLike
  ): Result;

  events: {};
}

export class MessageTester extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MessageTesterInterface;

  functions: {
    attemptSendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'attemptSendMessage(bytes32,bytes)'(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attemptSendMessageWithAmount(
      recipient: BytesLike,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'attemptSendMessageWithAmount(bytes32,uint256,bytes)'(
      recipient: BytesLike,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    data1(overrides?: CallOverrides): Promise<[BigNumber]>;

    'data1()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    data2(overrides?: CallOverrides): Promise<[BigNumber]>;

    'data2()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    fuelMessagePortal(overrides?: CallOverrides): Promise<[string]>;

    'fuelMessagePortal()'(overrides?: CallOverrides): Promise<[string]>;

    getTrustedSender(overrides?: CallOverrides): Promise<[string]>;

    'getTrustedSender()'(overrides?: CallOverrides): Promise<[string]>;

    receiveMessage(
      d1: BigNumberish,
      d2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'receiveMessage(uint256,uint256)'(
      d1: BigNumberish,
      d2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  attemptSendMessage(
    recipient: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'attemptSendMessage(bytes32,bytes)'(
    recipient: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attemptSendMessageWithAmount(
    recipient: BytesLike,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'attemptSendMessageWithAmount(bytes32,uint256,bytes)'(
    recipient: BytesLike,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  data1(overrides?: CallOverrides): Promise<BigNumber>;

  'data1()'(overrides?: CallOverrides): Promise<BigNumber>;

  data2(overrides?: CallOverrides): Promise<BigNumber>;

  'data2()'(overrides?: CallOverrides): Promise<BigNumber>;

  fuelMessagePortal(overrides?: CallOverrides): Promise<string>;

  'fuelMessagePortal()'(overrides?: CallOverrides): Promise<string>;

  getTrustedSender(overrides?: CallOverrides): Promise<string>;

  'getTrustedSender()'(overrides?: CallOverrides): Promise<string>;

  receiveMessage(
    d1: BigNumberish,
    d2: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'receiveMessage(uint256,uint256)'(
    d1: BigNumberish,
    d2: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    attemptSendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    'attemptSendMessage(bytes32,bytes)'(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    attemptSendMessageWithAmount(
      recipient: BytesLike,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    'attemptSendMessageWithAmount(bytes32,uint256,bytes)'(
      recipient: BytesLike,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    data1(overrides?: CallOverrides): Promise<BigNumber>;

    'data1()'(overrides?: CallOverrides): Promise<BigNumber>;

    data2(overrides?: CallOverrides): Promise<BigNumber>;

    'data2()'(overrides?: CallOverrides): Promise<BigNumber>;

    fuelMessagePortal(overrides?: CallOverrides): Promise<string>;

    'fuelMessagePortal()'(overrides?: CallOverrides): Promise<string>;

    getTrustedSender(overrides?: CallOverrides): Promise<string>;

    'getTrustedSender()'(overrides?: CallOverrides): Promise<string>;

    receiveMessage(
      d1: BigNumberish,
      d2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'receiveMessage(uint256,uint256)'(
      d1: BigNumberish,
      d2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    attemptSendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'attemptSendMessage(bytes32,bytes)'(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attemptSendMessageWithAmount(
      recipient: BytesLike,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'attemptSendMessageWithAmount(bytes32,uint256,bytes)'(
      recipient: BytesLike,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    data1(overrides?: CallOverrides): Promise<BigNumber>;

    'data1()'(overrides?: CallOverrides): Promise<BigNumber>;

    data2(overrides?: CallOverrides): Promise<BigNumber>;

    'data2()'(overrides?: CallOverrides): Promise<BigNumber>;

    fuelMessagePortal(overrides?: CallOverrides): Promise<BigNumber>;

    'fuelMessagePortal()'(overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedSender(overrides?: CallOverrides): Promise<BigNumber>;

    'getTrustedSender()'(overrides?: CallOverrides): Promise<BigNumber>;

    receiveMessage(
      d1: BigNumberish,
      d2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'receiveMessage(uint256,uint256)'(
      d1: BigNumberish,
      d2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attemptSendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'attemptSendMessage(bytes32,bytes)'(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attemptSendMessageWithAmount(
      recipient: BytesLike,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'attemptSendMessageWithAmount(bytes32,uint256,bytes)'(
      recipient: BytesLike,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    data1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'data1()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    data2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'data2()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fuelMessagePortal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'fuelMessagePortal()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getTrustedSender()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveMessage(
      d1: BigNumberish,
      d2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'receiveMessage(uint256,uint256)'(
      d1: BigNumberish,
      d2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
