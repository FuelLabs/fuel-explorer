/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface UpgradeableTesterInterface extends ethers.utils.Interface {
  functions: {
    'fuelMessagePortal()': FunctionFragment;
    'testFuelMessagesEnabledInit(address)': FunctionFragment;
    'testFuelMessagesEnabledInitUnchained(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'fuelMessagePortal',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'testFuelMessagesEnabledInit',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'testFuelMessagesEnabledInitUnchained',
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: 'fuelMessagePortal',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'testFuelMessagesEnabledInit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'testFuelMessagesEnabledInitUnchained',
    data: BytesLike
  ): Result;

  events: {
    'Initialized(uint8)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
}

export class UpgradeableTester extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UpgradeableTesterInterface;

  functions: {
    fuelMessagePortal(overrides?: CallOverrides): Promise<[string]>;

    'fuelMessagePortal()'(overrides?: CallOverrides): Promise<[string]>;

    testFuelMessagesEnabledInit(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'testFuelMessagesEnabledInit(address)'(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFuelMessagesEnabledInitUnchained(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'testFuelMessagesEnabledInitUnchained(address)'(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  fuelMessagePortal(overrides?: CallOverrides): Promise<string>;

  'fuelMessagePortal()'(overrides?: CallOverrides): Promise<string>;

  testFuelMessagesEnabledInit(
    fuelMessagePortal: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'testFuelMessagesEnabledInit(address)'(
    fuelMessagePortal: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFuelMessagesEnabledInitUnchained(
    fuelMessagePortal: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'testFuelMessagesEnabledInitUnchained(address)'(
    fuelMessagePortal: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fuelMessagePortal(overrides?: CallOverrides): Promise<string>;

    'fuelMessagePortal()'(overrides?: CallOverrides): Promise<string>;

    testFuelMessagesEnabledInit(
      fuelMessagePortal: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'testFuelMessagesEnabledInit(address)'(
      fuelMessagePortal: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testFuelMessagesEnabledInitUnchained(
      fuelMessagePortal: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'testFuelMessagesEnabledInitUnchained(address)'(
      fuelMessagePortal: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Initialized(version: null): TypedEventFilter<[number], { version: number }>;
  };

  estimateGas: {
    fuelMessagePortal(overrides?: CallOverrides): Promise<BigNumber>;

    'fuelMessagePortal()'(overrides?: CallOverrides): Promise<BigNumber>;

    testFuelMessagesEnabledInit(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'testFuelMessagesEnabledInit(address)'(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFuelMessagesEnabledInitUnchained(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'testFuelMessagesEnabledInitUnchained(address)'(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fuelMessagePortal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'fuelMessagePortal()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testFuelMessagesEnabledInit(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'testFuelMessagesEnabledInit(address)'(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFuelMessagesEnabledInitUnchained(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'testFuelMessagesEnabledInitUnchained(address)'(
      fuelMessagePortal: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
