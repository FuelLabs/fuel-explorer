/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';

import type { UpgradeableTester } from '../UpgradeableTester';

export class UpgradeableTester__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UpgradeableTester> {
    return super.deploy(overrides || {}) as Promise<UpgradeableTester>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UpgradeableTester {
    return super.attach(address) as UpgradeableTester;
  }
  connect(signer: Signer): UpgradeableTester__factory {
    return super.connect(signer) as UpgradeableTester__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UpgradeableTester {
    return new Contract(address, _abi, signerOrProvider) as UpgradeableTester;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint8',
        name: 'version',
        type: 'uint8',
      },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    inputs: [],
    name: 'fuelMessagePortal',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract FuelMessagePortal',
        name: 'fuelMessagePortal',
        type: 'address',
      },
    ],
    name: 'testFuelMessagesEnabledInit',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract FuelMessagePortal',
        name: 'fuelMessagePortal',
        type: 'address',
      },
    ],
    name: 'testFuelMessagesEnabledInitUnchained',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506102be806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806305873ec6146100465780635176a43d1461005b57806385e94d84146100a3575b600080fd5b61005961005436600461024b565b6100b6565b005b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1660405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100596100b136600461024b565b6100c2565b6100bf816100cb565b50565b6100bf816101b4565b600054610100900460ff16610167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b600054610100900460ff166100b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161015e565b60006020828403121561025d57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461028157600080fd5b939250505056fea26469706673582212202fd8ff4bf800146621325e9662e31f80e1696cb95d29e23913d4cf715b1b00c764736f6c63430008090033';
