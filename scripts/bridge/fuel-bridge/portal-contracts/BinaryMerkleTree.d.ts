/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface BinaryMerkleTreeInterface extends ethers.utils.Interface {
  functions: {
    'addBranchesAndUpdate(tuple[],bytes32,bytes32,bytes,uint256)': FunctionFragment;
    'append(uint256,bytes,bytes32[])': FunctionFragment;
    'computeRoot(bytes[])': FunctionFragment;
    'deriveAppendProofFromLastProof(bytes32[],bytes32,uint256)': FunctionFragment;
    'updateWithSideNodes(bytes32,bytes,bytes32[],uint256)': FunctionFragment;
    'verify(bytes32,bytes,bytes32[],uint256,uint256)': FunctionFragment;
    'verifyDigest(bytes32,bytes32,bytes32[],uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'addBranchesAndUpdate',
    values: [
      { proof: BytesLike[]; key: BytesLike; value: BytesLike }[],
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'append',
    values: [BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'computeRoot',
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'deriveAppendProofFromLastProof',
    values: [BytesLike[], BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateWithSideNodes',
    values: [BytesLike, BytesLike, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'verify',
    values: [BytesLike, BytesLike, BytesLike[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'verifyDigest',
    values: [BytesLike, BytesLike, BytesLike[], BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'addBranchesAndUpdate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'append', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'computeRoot',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deriveAppendProofFromLastProof',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateWithSideNodes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'verifyDigest',
    data: BytesLike
  ): Result;

  events: {};
}

export class BinaryMerkleTree extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BinaryMerkleTreeInterface;

  functions: {
    addBranchesAndUpdate(
      branches: { proof: BytesLike[]; key: BytesLike; value: BytesLike }[],
      root: BytesLike,
      key: BytesLike,
      value: BytesLike,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { newRoot: string }>;

    'addBranchesAndUpdate(tuple[],bytes32,bytes32,bytes,uint256)'(
      branches: { proof: BytesLike[]; key: BytesLike; value: BytesLike }[],
      root: BytesLike,
      key: BytesLike,
      value: BytesLike,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { newRoot: string }>;

    append(
      numLeaves: BigNumberish,
      data: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    'append(uint256,bytes,bytes32[])'(
      numLeaves: BigNumberish,
      data: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    computeRoot(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    'computeRoot(bytes[])'(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    deriveAppendProofFromLastProof(
      oldProof: BytesLike[],
      lastLeaf: BytesLike,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    'deriveAppendProofFromLastProof(bytes32[],bytes32,uint256)'(
      oldProof: BytesLike[],
      lastLeaf: BytesLike,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    updateWithSideNodes(
      key: BytesLike,
      value: BytesLike,
      sideNodes: BytesLike[],
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { currentPtr: string }>;

    'updateWithSideNodes(bytes32,bytes,bytes32[],uint256)'(
      key: BytesLike,
      value: BytesLike,
      sideNodes: BytesLike[],
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { currentPtr: string }>;

    verify(
      root: BytesLike,
      data: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    'verify(bytes32,bytes,bytes32[],uint256,uint256)'(
      root: BytesLike,
      data: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyDigest(
      root: BytesLike,
      digest: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    'verifyDigest(bytes32,bytes32,bytes32[],uint256,uint256)'(
      root: BytesLike,
      digest: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addBranchesAndUpdate(
    branches: { proof: BytesLike[]; key: BytesLike; value: BytesLike }[],
    root: BytesLike,
    key: BytesLike,
    value: BytesLike,
    numLeaves: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  'addBranchesAndUpdate(tuple[],bytes32,bytes32,bytes,uint256)'(
    branches: { proof: BytesLike[]; key: BytesLike; value: BytesLike }[],
    root: BytesLike,
    key: BytesLike,
    value: BytesLike,
    numLeaves: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  append(
    numLeaves: BigNumberish,
    data: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  'append(uint256,bytes,bytes32[])'(
    numLeaves: BigNumberish,
    data: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  computeRoot(data: BytesLike[], overrides?: CallOverrides): Promise<string>;

  'computeRoot(bytes[])'(
    data: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  deriveAppendProofFromLastProof(
    oldProof: BytesLike[],
    lastLeaf: BytesLike,
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  'deriveAppendProofFromLastProof(bytes32[],bytes32,uint256)'(
    oldProof: BytesLike[],
    lastLeaf: BytesLike,
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  updateWithSideNodes(
    key: BytesLike,
    value: BytesLike,
    sideNodes: BytesLike[],
    numLeaves: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  'updateWithSideNodes(bytes32,bytes,bytes32[],uint256)'(
    key: BytesLike,
    value: BytesLike,
    sideNodes: BytesLike[],
    numLeaves: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  verify(
    root: BytesLike,
    data: BytesLike,
    proof: BytesLike[],
    key: BigNumberish,
    numLeaves: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  'verify(bytes32,bytes,bytes32[],uint256,uint256)'(
    root: BytesLike,
    data: BytesLike,
    proof: BytesLike[],
    key: BigNumberish,
    numLeaves: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyDigest(
    root: BytesLike,
    digest: BytesLike,
    proof: BytesLike[],
    key: BigNumberish,
    numLeaves: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  'verifyDigest(bytes32,bytes32,bytes32[],uint256,uint256)'(
    root: BytesLike,
    digest: BytesLike,
    proof: BytesLike[],
    key: BigNumberish,
    numLeaves: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addBranchesAndUpdate(
      branches: { proof: BytesLike[]; key: BytesLike; value: BytesLike }[],
      root: BytesLike,
      key: BytesLike,
      value: BytesLike,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    'addBranchesAndUpdate(tuple[],bytes32,bytes32,bytes,uint256)'(
      branches: { proof: BytesLike[]; key: BytesLike; value: BytesLike }[],
      root: BytesLike,
      key: BytesLike,
      value: BytesLike,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    append(
      numLeaves: BigNumberish,
      data: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    'append(uint256,bytes,bytes32[])'(
      numLeaves: BigNumberish,
      data: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    computeRoot(data: BytesLike[], overrides?: CallOverrides): Promise<string>;

    'computeRoot(bytes[])'(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    deriveAppendProofFromLastProof(
      oldProof: BytesLike[],
      lastLeaf: BytesLike,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    'deriveAppendProofFromLastProof(bytes32[],bytes32,uint256)'(
      oldProof: BytesLike[],
      lastLeaf: BytesLike,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    updateWithSideNodes(
      key: BytesLike,
      value: BytesLike,
      sideNodes: BytesLike[],
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    'updateWithSideNodes(bytes32,bytes,bytes32[],uint256)'(
      key: BytesLike,
      value: BytesLike,
      sideNodes: BytesLike[],
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    verify(
      root: BytesLike,
      data: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'verify(bytes32,bytes,bytes32[],uint256,uint256)'(
      root: BytesLike,
      data: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyDigest(
      root: BytesLike,
      digest: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'verifyDigest(bytes32,bytes32,bytes32[],uint256,uint256)'(
      root: BytesLike,
      digest: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addBranchesAndUpdate(
      branches: { proof: BytesLike[]; key: BytesLike; value: BytesLike }[],
      root: BytesLike,
      key: BytesLike,
      value: BytesLike,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'addBranchesAndUpdate(tuple[],bytes32,bytes32,bytes,uint256)'(
      branches: { proof: BytesLike[]; key: BytesLike; value: BytesLike }[],
      root: BytesLike,
      key: BytesLike,
      value: BytesLike,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    append(
      numLeaves: BigNumberish,
      data: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'append(uint256,bytes,bytes32[])'(
      numLeaves: BigNumberish,
      data: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeRoot(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'computeRoot(bytes[])'(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deriveAppendProofFromLastProof(
      oldProof: BytesLike[],
      lastLeaf: BytesLike,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'deriveAppendProofFromLastProof(bytes32[],bytes32,uint256)'(
      oldProof: BytesLike[],
      lastLeaf: BytesLike,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateWithSideNodes(
      key: BytesLike,
      value: BytesLike,
      sideNodes: BytesLike[],
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'updateWithSideNodes(bytes32,bytes,bytes32[],uint256)'(
      key: BytesLike,
      value: BytesLike,
      sideNodes: BytesLike[],
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      root: BytesLike,
      data: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'verify(bytes32,bytes,bytes32[],uint256,uint256)'(
      root: BytesLike,
      data: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyDigest(
      root: BytesLike,
      digest: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'verifyDigest(bytes32,bytes32,bytes32[],uint256,uint256)'(
      root: BytesLike,
      digest: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBranchesAndUpdate(
      branches: { proof: BytesLike[]; key: BytesLike; value: BytesLike }[],
      root: BytesLike,
      key: BytesLike,
      value: BytesLike,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'addBranchesAndUpdate(tuple[],bytes32,bytes32,bytes,uint256)'(
      branches: { proof: BytesLike[]; key: BytesLike; value: BytesLike }[],
      root: BytesLike,
      key: BytesLike,
      value: BytesLike,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    append(
      numLeaves: BigNumberish,
      data: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'append(uint256,bytes,bytes32[])'(
      numLeaves: BigNumberish,
      data: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeRoot(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'computeRoot(bytes[])'(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deriveAppendProofFromLastProof(
      oldProof: BytesLike[],
      lastLeaf: BytesLike,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'deriveAppendProofFromLastProof(bytes32[],bytes32,uint256)'(
      oldProof: BytesLike[],
      lastLeaf: BytesLike,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateWithSideNodes(
      key: BytesLike,
      value: BytesLike,
      sideNodes: BytesLike[],
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'updateWithSideNodes(bytes32,bytes,bytes32[],uint256)'(
      key: BytesLike,
      value: BytesLike,
      sideNodes: BytesLike[],
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      root: BytesLike,
      data: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'verify(bytes32,bytes,bytes32[],uint256,uint256)'(
      root: BytesLike,
      data: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyDigest(
      root: BytesLike,
      digest: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'verifyDigest(bytes32,bytes32,bytes32[],uint256,uint256)'(
      root: BytesLike,
      digest: BytesLike,
      proof: BytesLike[],
      key: BigNumberish,
      numLeaves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
