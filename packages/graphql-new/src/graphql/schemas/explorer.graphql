schema {
  query: Query
}

# --------------------------------
# Transaction
# --------------------------------

type ParsedTime {
  fromNow: String
  full: String
  rawTai64: String
  rawUnix: String
}

type TransactionGasCosts {
  gasUsed: String
  fee: String
}

extend type Transaction {
  time: ParsedTime
  gasCosts: TransactionGasCosts
}

# --------------------------------
# Contract
# --------------------------------

type ContractConnection {
  nodes: [Contract]
  pageInfo: PageInfo!
}

# --------------------------------
# Predicate
# --------------------------------

type PredicateItem {
  address: Address
  bytecode: String
}

# --------------------------------
# Search
# --------------------------------

type SearchAccount {
  address: Address
  transactions: [SearchTransaction]
}

type SearchContract {
  id: ContractId
}

type SearchBlock {
  id: BlockId
  height: String
}

type SearchTransaction {
  id: TransactionId
}

type SearchResult {
  account: SearchAccount
  contract: SearchContract
  block: SearchBlock
  transaction: SearchTransaction
}

# --------------------------------
# Query
# --------------------------------

type Query {
  contracts(
    after: String
    before: String
    first: Int
    last: Int
  ): ContractConnection!

  search(query: String!): SearchResult
  predicate(address: String!): PredicateItem
}
