schema {
  query: Query
}

# --------------------------------
# Balances
# --------------------------------

type UtxoItem {
  amount: U64!
  blockCreated: U32
  txCreatedIdx: U64
  utxoId: UtxoId!
}

type Balance {
  utxos: [UtxoItem]
}

# --------------------------------
# Blocks
# --------------------------------

type Block {
  time: ParsedTime
  totalGasUsed: U64
  producer: Address
}

# --------------------------------
# GroupedInputs
# --------------------------------

enum GroupedInputType {
  InputCoin
  InputContract
  InputMessage
}

type GroupedInputCoin {
  assetId: AssetId
  inputs: [Input]
  owner: Address
  totalAmount: U64
  type: GroupedInputType
}

type GroupedInputContract {
  contractId: ContractId
  inputs: [Input]
  type: GroupedInputType
}

type GroupedInputMessage {
  data: HexString
  inputs: [Input]
  recipient: Address
  sender: Address
  type: GroupedInputType
}

union GroupedInput =
  | GroupedInputCoin
  | GroupedInputContract
  | GroupedInputMessage

# --------------------------------
# GroupedOutputs
# --------------------------------

enum GroupedOutputType {
  ChangeOutput
  CoinOutput
  ContractCreated
}

type GroupedOutputCoin {
  assetId: AssetId
  outputs: [Output]
  to: Address
  totalAmount: U64
  type: GroupedOutputType
}

type GroupedOutputChanged {
  assetId: AssetId
  outputs: [Output]
  to: Address
  totalAmount: U64
  type: GroupedOutputType
}

type GroupedOutputContractCreadted {
  contract: Contract
  outputs: [Output]
  type: GroupedOutputType
}

union GroupedOutput =
  | GroupedOutputCoin
  | GroupedOutputChanged
  | GroupedOutputContractCreadted

# --------------------------------
# Transaction
# --------------------------------

type ParsedTime {
  fromNow: String
  full: String
  rawTai64: String
  rawUnix: String
}

enum TransactionStatusType {
  Success
  Failure
  Submitted
}

type TransactionGasCosts {
  gasUsed: U64
  fee: U64
}

type Transaction {
  blockHeight: String
  gasCosts: TransactionGasCosts
  groupedInputs: [GroupedInput]!
  groupedOutputs: [GroupedOutput]!
  hasPredicate: Boolean
  statusType: TransactionStatusType
  time: ParsedTime
  title: String
}

# --------------------------------
# Contract
# --------------------------------

type ContractConnection {
  nodes: [Contract]
  pageInfo: PageInfo!
}

# --------------------------------
# Predicate
# --------------------------------

type PredicateItem {
  address: Address
  bytecode: String
}

# --------------------------------
# Search
# --------------------------------

type SearchAccount {
  address: Address
  transactions: [SearchTransaction]
}

type SearchContract {
  id: ContractId
}

type SearchBlock {
  id: BlockId
  height: String
}

type SearchTransaction {
  id: TransactionId
}

type SearchResult {
  account: SearchAccount
  block: SearchBlock
  contract: SearchContract
  transaction: SearchTransaction
}

# --------------------------------
# Query
# --------------------------------

type Query {
  contracts(
    after: String
    before: String
    first: Int
    last: Int
  ): ContractConnection!

  search(query: String!): SearchResult
  predicate(address: String!): PredicateItem
}
